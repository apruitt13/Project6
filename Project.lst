Microsoft (R) Macro Assembler Version 14.29.30138.0	    03/12/22 16:59:08
"Project 6     (Proj6_pruittad.asm			     Page 1 - 1


				TITLE Project 6     (Proj6_pruittad.asm)

				; Author: Adam Pruitt
				; Last Modified: 3/13/22
				; OSU email address: pruittad@oregonstate.edu
				; Course number/section:   CS271 Section 401
				; Project Number:     6            Due Date: 3/13/22
				; Description: This is a program that has asks a user for 10 signed decinal integers. It will then take those integers and print them out, add them and find the average.
				; This program however can only use macros to get the string of numbers, convert them to integers, and print them out as strings.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; Macros
				  mGetString macro numPrompt, count, numEntered, byteRead
					push	edx
					mov		edx, numPrompt
					call	WriteString
					mov		edx, numEntered
					mov		ecx, count
					call	ReadString
					mov		[numEntered], edx
					mov		[byteRead], EAX
					pop		edx
				  
				ENDM
				  ; Needs to display a prompt by reference. 

				  ; Check that the user's entry is within the length that can be accepted and that it has only numbers.

				  ; Accept the user's number entry and store it in a memory location. Output parameter by reference.


				  mDisplayString macro string
					push	EDX
					mov		EDX, string
					call	WriteString					; Prints whatever string is passed to it.
					pop		EDX
				  ENDM


				; (insert constant definitions here)
 = 0000000A			  ARRAYSIZE = 10
 = 00000014			  CHARACTERSIZE	= 20
 = 00000014			  ASCIIARRAYSIZE = 20
				  

 00000000			.data
				 
 00000000  0000000A [		  numArray			sdword	ARRAYSIZE DUP(?)
	    00000000
	   ]
 00000028  00000014 [		  asciiArray		byte	ASCIIARRAYSIZE DUP(?)
	    00
	   ]

 0000003C 50 52 4F 47 52	  intro1			byte	"PROGRAMMING ASSIGNMENT 6: Designing low-level I/O procedures", 13, 10
	   41 4D 4D 49 4E
	   47 20 41 53 53
	   49 47 4E 4D 45
	   4E 54 20 36 3A
	   20 44 65 73 69
	   67 6E 69 6E 67
	   20 6C 6F 77 2D
	   6C 65 76 65 6C
	   20 49 2F 4F 20
	   70 72 6F 63 65
	   64 75 72 65 73
	   0D 0A
 0000007A  57 72 69 74 74						byte	"Written by: Adam Pruitt", 13, 10, 13, 10
	   65 6E 20 62 79
	   3A 20 41 64 61
	   6D 20 50 72 75
	   69 74 74 0D 0A
	   0D 0A
 00000095  50 6C 65 61 73						byte	"Please provide 10 signed decimal integers.", 13, 10
	   65 20 70 72 6F
	   76 69 64 65 20
	   31 30 20 73 69
	   67 6E 65 64 20
	   64 65 63 69 6D
	   61 6C 20 69 6E
	   74 65 67 65 72
	   73 2E 0D 0A
 000000C1  45 61 63 68 20						byte	"Each number needs to be small enough to fit inside a 32 bit register. After you have finished inputting", 13, 10
	   6E 75 6D 62 65
	   72 20 6E 65 65
	   64 73 20 74 6F
	   20 62 65 20 73
	   6D 61 6C 6C 20
	   65 6E 6F 75 67
	   68 20 74 6F 20
	   66 69 74 20 69
	   6E 73 69 64 65
	   20 61 20 33 32
	   20 62 69 74 20
	   72 65 67 69 73
	   74 65 72 2E 20
	   41 66 74 65 72
	   20 79 6F 75 20
	   68 61 76 65 20
	   66 69 6E 69 73
	   68 65 64 20 69
	   6E 70 75 74 74
	   69 6E 67 0D 0A
 0000012A  74 68 65 20 72						byte	"the raw numbers I will display a list of the integers, their sum, and their average value.", 13, 10, 13, 10, 0
	   61 77 20 6E 75
	   6D 62 65 72 73
	   20 49 20 77 69
	   6C 6C 20 64 69
	   73 70 6C 61 79
	   20 61 20 6C 69
	   73 74 20 6F 66
	   20 74 68 65 20
	   69 6E 74 65 67
	   65 72 73 2C 20
	   74 68 65 69 72
	   20 73 75 6D 2C
	   20 61 6E 64 20
	   74 68 65 69 72
	   20 61 76 65 72
	   61 67 65 20 76
	   61 6C 75 65 2E
	   0D 0A 0D 0A 00
 00000189 50 6C 65 61 73	  enterNum			byte	"Please enter a signed number: ", 0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 3A 20
	   00
 000001A8 45 52 52 4F 52	  wrongNum			byte	"ERROR: You did not enter a signed number or your number was too big.", 13, 10
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 20 73 69 67
	   6E 65 64 20 6E
	   75 6D 62 65 72
	   20 6F 72 20 79
	   6F 75 72 20 6E
	   75 6D 62 65 72
	   20 77 61 73 20
	   74 6F 6F 20 62
	   69 67 2E 0D 0A
 000001EE  50 6C 65 61 73						byte	"Please try again: ", 0
	   65 20 74 72 79
	   20 61 67 61 69
	   6E 3A 20 00
 00000201 59 6F 75 20 65	  enteredNums		byte	"You entered the following numbers: ", 13, 10, 0
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 20
	   0D 0A 00
 00000227 54 68 65 20 73	  sumString			byte	"The sum of thse numbers is: ", 0
	   75 6D 20 6F 66
	   20 74 68 73 65
	   20 6E 75 6D 62
	   65 72 73 20 69
	   73 3A 20 00
 00000244 54 68 65 20 74	  averageString		byte	"The truncated average is: ", 0
	   72 75 6E 63 61
	   74 65 64 20 61
	   76 65 72 61 67
	   65 20 69 73 3A
	   20 00
 0000025F 00000000		  stringLen			sdword	?	
 00000263  00000015 [		  buffer			byte	21 DUP (0)
	    00
	   ]
 00000278 00000000		  bytesRead			sdword	?
 0000027C  00000014 [		  inString			byte	CHARACTERSIZE dup(?)
	    00
	   ]

 00000290 00000000		  enteredNum		sdword	?
 00000294 00000000		  arrayPosition		sdword	0
 00000298 0000000A		  count				sDWORD   LENGTHOF numArray  ; debugging purposes
 0000029C 00000000		  numSum			sdword	?
 000002A0 00000000		  numAverage		sdword	?
 000002A4 00000014		  lengthAscii		sdword	LENGTHOF  asciiArray


				  



 00000000			.code
 00000000			main PROC

 00000000  68 0000003C R	  push	offset intro1
 00000005  E8 00000095		  call	Intro

 0000000A  B9 0000000A		  mov	ecx, 10
 0000000F			_getNumLoop:
 0000000F  FF 35 00000294 R	  push	arrayPosition
 00000015  68 00000000 R	  push	offset	numArray
 0000001A  68 000001A8 R	  push	offset	wrongNum
 0000001F  68 00000278 R	  push	offset	bytesRead
 00000024  68 0000027C R	  push	offset	inString
 00000029  68 00000189 R	  push	offset	enterNum
 0000002E  E8 0000007F		  call	ReadVal
 00000033  83 05 00000294 R	  add	arrayPosition, 4
	   04
 0000003A  E2 D3		  loop _getNumLoop

 0000003C  E8 00000000 E	  call	crlf

				  ;printing out the array.
 00000041  FF 35 00000298 R	  push	count
 00000047  68 00000028 R	  push	offset	asciiArray
 0000004C  68 00000000 R	  push	offset	numArray
 00000051  68 00000201 R	  push	offset	enteredNums
 00000056  E8 0000011E		  call	PrintArray
				  
 0000005B  E8 00000000 E	  call	crlf
				  ;Finding the sum and printing it.


 00000060  68 00000227 R	  push	offset	sumString
 00000065  68 0000029C R	  push	offset	numSum
 0000006A  68 00000028 R	  push	offset	asciiArray
 0000006F  FF 35 00000298 R	  push	count
 00000075  68 00000000 R	  push	offset	numArray
 0000007A  E8 00000195		  call  FindSum

 0000007F  E8 00000000 E	  call	crlf

 00000084  68 000002A0 R	  push	offset	numAverage
 00000089  68 0000029C R	  push	offset	numSum
 0000008E  68 00000244 R	  push	offset	averageString
 00000093  E8 000001BC		  call	FindAverage


					Invoke ExitProcess,0	; exit to operating system
 00000098  6A 00	   *	    push   +000000000h
 0000009A  E8 00000000 E   *	    call   ExitProcess
 0000009F			main ENDP


				;----------------------------------------------------------------------------------------------------
				; Name: intro
				;
				; Displays the introduction 
				;
				; Preconditions: The only preconditions are that the variables need to be pushed onto the stack in
				; the correct order.
				;
				; Postconditions: EDX changed.
				;
				; Receives: 
				;	
				; 
				; Returns: None
				;----------------------------------------------------------------------------------------------------

 0000009F			Intro	Proc
 0000009F  55			  PUSH	EBP						; Preserve EBP
 000000A0  8B EC		  mov	EBP, ESP				; Assign static stack-fram pointer.
 000000A2  60			  pushad

				  mDisplayString [ebp+8]			; Prints intro1.
 000000A3  52		     1		push	EDX
 000000A4  8B 55 08	     1		mov		EDX, [ebp+8]
 000000A7  E8 00000000 E     1		call	WriteString					; Prints whatever string is passed to it.
 000000AC  5A		     1		pop		EDX

 000000AD  61			  popad
 000000AE  5D			  pop	EBP						; Restore EBP.
 000000AF  C2 0004		  RET	4
 000000B2			Intro	ENDP

				;----------------------------------------------------------------------------------------------------
				; Name: intro
				;
				; Displays the introduction 
				;
				; Preconditions: The only preconditions are that the variables need to be pushed onto the stack in
				; the correct order.
				;
				; Postconditions: EDX changed.
				;
				; Receives: 
				;	
				; 
				; Returns: None
				;----------------------------------------------------------------------------------------------------
 000000B2			ReadVal	Proc
 000000B2  55			  PUSH	EBP						; Preserve EBP
 000000B3  8B EC		  mov	EBP, ESP				; Assign static stack-fram pointer.
 000000B5  51			  push  ecx						; Saving the loop count.
				  
 000000B6  BF 00000000		  mov	edi, 0				; This is going to be my integer
 000000BB  BA 00000000		  mov	edx, 0				; Make sure this is cleared or it will make some of the integers negative.

 000000C0			_start:
				  mGetString [ebp+8], CHARACTERSIZE, [ebp+12], [ebp+16]
 000000C0  52		     1		push	edx
 000000C1  8B 55 08	     1		mov		edx, [ebp+8]
 000000C4  E8 00000000 E     1		call	WriteString
 000000C9  8B 55 0C	     1		mov		edx, [ebp+12]
 000000CC  B9 00000014	     1		mov		ecx, CHARACTERSIZE
 000000D1  E8 00000000 E     1		call	ReadString
 000000D6  89 55 0C	     1		mov		[[ebp+12]], edx
 000000D9  89 45 10	     1		mov		[[ebp+16]], EAX
 000000DC  5A		     1		pop		edx
 000000DD  8B 45 10		  mov	eax, [ebp+16]		; The number of bytes read.
 000000E0  8B 75 0C		  mov	esi, [ebp+12]		; Storing the string that was entered into esi.

 000000E3  FC			  cld
 000000E4  8B C8		  mov	ecx, eax
 000000E6  83 F9 0B		  cmp	ecx, 11				; Checking if the number is too large.
 000000E9  7F 32		  jg	_invalid
 000000EB			_getNumber:			
 000000EB  33 C0		  xor	eax, eax
 000000ED  AC			LODSB
				  ; I also need to check if the first number is a negative number or positive. But only the first time. Otherwise it's an invalid number.
 000000EE  83 F8 2D		  cmp	eax, 45
 000000F1  74 11		  je	_negative			; If it's a negative sign.
 000000F3  83 F8 2B		  cmp	eax, 43
 000000F6  74 1C		  je	_positive			; If it's a positive sign.
 000000F8  83 F8 30		  cmp	eax, 48
 000000FB  7C 20		  jl	_invalid			; Jump to _invalid if it's not a number. Numbers are between 48 and 57.
 000000FD  83 F8 39		  cmp	eax, 57
 00000100  7F 1B		  jg	_invalid
 00000102  EB 45		  jmp	_convert

				; If there is a negative sign at the beginning it's a valid number. Otherwise it's invalid.
 00000104			_negative:
 00000104  50			  push	eax
 00000105  8B 45 10		  mov	eax, [ebp+16]		; The number of bytes read.
 00000108  3B C8		  cmp	ecx, eax
 0000010A  58			  pop	eax
 0000010B  7C 10		  jl	_invalid
 0000010D  BA 00000001		  mov	edx, 1				; Adds 1 to edx to indicate it's a negative number for later.
 00000112  E2 D7		  loop	_getNumber
				  
				; If there is a positive sign at the beginning it's a valid number. Otherwise it's invalid.
 00000114			_positive:
 00000114  8B 45 10		  mov	eax, [ebp+16]		; If there is a plus 
 00000117  3B C8		  cmp	ecx, eax
 00000119  7C 02		  jl	_invalid
 0000011B  E2 CE		  loop	_getNumber

				; The number is not valid. A new string is displayed and a new number retrieved.
 0000011D			_invalid:
				  mGetString [ebp+20], CHARACTERSIZE, [ebp+12], [ebp+16]		; If it's an invalid number it prints a different statement and counts the string again.
 0000011D  52		     1		push	edx
 0000011E  8B 55 14	     1		mov		edx, [ebp+20]
 00000121  E8 00000000 E     1		call	WriteString
 00000126  8B 55 0C	     1		mov		edx, [ebp+12]
 00000129  B9 00000014	     1		mov		ecx, CHARACTERSIZE
 0000012E  E8 00000000 E     1		call	ReadString
 00000133  89 55 0C	     1		mov		[[ebp+12]], edx
 00000136  89 45 10	     1		mov		[[ebp+16]], EAX
 00000139  5A		     1		pop		edx
 0000013A  8B 45 10		  mov	eax, [ebp+16]
 0000013D  8B 75 0C		  mov	esi, [ebp+12]
 00000140  8B C8		  mov	ecx, eax
 00000142  83 F9 0B		  cmp	ecx, 11				; Checking if the number is too large.
 00000145  7F D6		  jg	_invalid
 00000147  EB A2		  jmp	_getNumber

				; converting the string to a number.
 00000149			_convert:

 00000149  50			  push  eax						; Saving the value in eax. This is the ascii value
 0000014A  52			  push	edx						; Saving if it's negative.
 0000014B  83 E8 30		  sub	eax, 48					; Subtracting 48 from it.
 0000014E  8B D8		  mov	ebx, eax				; Moving it to ebp.
 00000150  B8 0000000A		  mov	eax, 10					; Moving 10 to eax to multiply.
 00000155  F7 E7		  mul	edi						; edi is where the number is stored. Starts at 0. Multiply that by 10.
 00000157  8B F8		  mov	edi, eax				; Updating edi.
 00000159  03 FB		  add	edi, ebx				; Add edi to the amount when 48 subtracted from it.
 0000015B  5A			  pop	edx						; Restoring the negative indicator.
 0000015C  58			  pop	eax						; Restoring eax.
 0000015D  E2 8C		  loop	_getNumber

				; Checking to see if the the value had a negative sign.
 0000015F  83 FA 01		  cmp	edx, 1
 00000162  74 02		  je	_isNegative
 00000164  EB 04		  jmp	_addToArray

				; If it's negative it is negated.
 00000166			_isNegative:
 00000166  F7 DF		  neg	edi
 00000168  EB 00		  jmp	_addToArray


 0000016A			_addToArray:
 0000016A  8B 55 1C		  mov	edx, [ebp + 28]
 0000016D  8B 45 18		  mov	eax, [ebp + 24]
 00000170  03 C2		  add	eax, edx
 00000172  89 38		  mov	[eax], edi
				  ;mov	edi, [eax]		; Debugging purposes printed out the number.
				  ;mov	eax, edi
				  ;call	writeint




				; add the number to the array.
 00000174  59			  pop   ecx
 00000175  5D			  pop	EBP						; Restore EBP.
 00000176  C2 001C		  RET	28						; Change this value to however much is pushed onto the stack before the procedure is called.

 00000179			ReadVal		ENDP


				;----------------------------------------------------------------------------------------------------
				; Name: PrintArray
				;
				; Displays the introduction 
				;
				; Preconditions: The only preconditions are that the variables need to be pushed onto the stack in
				; the correct order.
				;
				; Postconditions: EDX changed.
				;
				; Receives: 
				;	
				; 
				; Returns: None
				;----------------------------------------------------------------------------------------------------

 00000179			PrintArray	Proc
 00000179  55			  PUSH	EBP						; Preserve EBP
 0000017A  8B EC		  mov	EBP, ESP				; Assign static stack-fram pointer.
 0000017C  60			  pushad


				  mDisplayString [ebp + 8]		; Displays the string enteredNums
 0000017D  52		     1		push	EDX
 0000017E  8B 55 08	     1		mov		EDX, [ebp + 8]
 00000181  E8 00000000 E     1		call	WriteString					; Prints whatever string is passed to it.
 00000186  5A		     1		pop		EDX
 00000187  B9 00000000		  mov	ecx, 0

 0000018C  8B 7D 10		  mov	edi, [ebp + 16]			; Array to store values
 0000018F  8B 75 0C		  mov	esi, [ebp + 12]			; Move the first element of the array.
 00000192  B9 0000000A		  mov	ecx, 10
 00000197			  _printVal:
 00000197  51			  push	ecx
 00000198  57			  push	edi
 00000199  E8 0000001F		  call	writeVal
 0000019E  5F			  pop	edi
 0000019F  59			  pop	ecx
 000001A0  83 C6 04		  add	esi, 4
 000001A3  83 F9 01		  cmp	ecx, 1
 000001A6  74 10		  je	_end
 000001A8  B0 2C		  mov	al, ','
 000001AA  E8 00000000 E	  call	WriteChar
 000001AF  B0 20		  mov	al, ' '
 000001B1  E8 00000000 E	  call	WriteChar
 000001B6  E2 DF		  loop	_printVal
				  
 000001B8			  _end:
 000001B8  61			  popad
 000001B9  5D			  pop	EBP						; Restore EBP.
 000001BA  C2 0014		  RET	20						; Change this value to however much is pushed onto the stack before the procedure is called.
				  
 000001BD			PrintArray	ENDP

				;----------------------------------------------------------------------------------------------------
				; Name: writeVal
				;
				; Displays the introduction 
				;
				; Preconditions: The only preconditions are that the variables need to be pushed onto the stack in
				; the correct order.
				;
				; Postconditions: EDX changed.
				;
				; Receives: 
				;	
				; 
				; Returns: None
				;----------------------------------------------------------------------------------------------------
 000001BD			WriteVal	Proc
 000001BD  55			  PUSH	EBP						; Preserve EBP
 000001BE  8B EC		  mov	EBP, ESP				; Assign static stack-fram pointer.
 000001C0  60			  pushad
 000001C1  FC			  CLD

 000001C2			_letsChangeThisNum:
 000001C2  8B 06		  mov	eax, [esi]				; Move the value into eax
 000001C4  B9 00000001		  mov	ecx, 1
 000001C9				_nextNum:
 000001C9  83 F8 00			  cmp	eax, 0
 000001CC  7C 18			  jl	_negativeNum
 000001CE  BB 0000000A			  mov	ebx, 10
 000001D3  99				  cdq
 000001D4  F7 FB			  idiv	ebx
 000001D6  83 C2 30			  add	edx, 48
 000001D9  52				  push  edx					; Move the remainder onto the stack
 000001DA  83 F8 00			  cmp	eax, 0
 000001DD  7F 02			  jg	_addFourNum			; Continue converting the next number.
 000001DF  EB 12			  jmp	_printNum

 000001E1			_addFourNum:
 000001E1  83 C1 01		  add	ecx, 1
 000001E4  EB E3		  jmp	_nextNum

 000001E6			_negativeNum:
 000001E6  F7 D8		  neg	eax
 000001E8  50			  push	eax
 000001E9  B0 2D		  mov	al, '-'
 000001EB  E8 00000000 E	  call	writeChar
 000001F0  58			  pop	eax
 000001F1  EB D6		  jmp	_nextNum  

 000001F3			_printNum:
 000001F3  58			  pop	eax
 000001F4  AA			  stosb
 000001F5  8B D0		  mov	edx, eax
 000001F7  8B 55 08		  mov	edx, [ebp + 8]
 000001FA  E2 F7		  loop	_printNum
 000001FC  B8 00000000		  mov	eax, 0
 00000201  AA			  stosb
				  mDisplayString edx
 00000202  52		     1		push	EDX
 00000203  8B D2	     1		mov		EDX, edx
 00000205  E8 00000000 E     1		call	WriteString					; Prints whatever string is passed to it.
 0000020A  5A		     1		pop		EDX
 0000020B  B8 00000000		  mov	eax, 0
 00000210  AA			  stosb

 00000211  61			  popad
 00000212  5D			  pop	EBP						; Restore EBP.
 00000213  C3			  RET							; Change this value to however much is pushed onto the stack before the procedure is called.
				  
 00000214			WriteVal	ENDP

				;----------------------------------------------------------------------------------------------------
				; Name: FindSum
				;
				; Displays the introduction 
				;
				; Preconditions: The only preconditions are that the variables need to be pushed onto the stack in
				; the correct order.
				;
				; Postconditions: EDX changed.
				;
				; Receives: 
				;	
				; 
				; Returns: None
				;----------------------------------------------------------------------------------------------------

 00000214			FindSum		Proc
 00000214  55			  PUSH	EBP						; Preserve EBP
 00000215  8B EC		  mov	EBP, ESP				; Assign static stack-fram pointer.
 00000217  60			  pushad

				  mDisplayString [ebp + 24]		; Displays the string enteredNums
 00000218  52		     1		push	EDX
 00000219  8B 55 18	     1		mov		EDX, [ebp + 24]
 0000021C  E8 00000000 E     1		call	WriteString					; Prints whatever string is passed to it.
 00000221  5A		     1		pop		EDX

 00000222  BA 00000000		  mov	edx, 0
 00000227  8B 7D 08		  mov	edi, [ebp + 8]			; Move the first element of the array.
 0000022A  8B 4D 0C		  mov	ecx, [ebp + 12]			; The count
				  
 0000022D			  _addNums:
 0000022D  8B 07		  mov	eax, [edi]
 0000022F  03 D0		  add	edx, eax
 00000231  83 C7 04		  add	edi, 4
 00000234  E2 F7		  loop	_addNums
 00000236  B8 00000000		  mov	eax, 0
 0000023B  8B 45 14		  mov	eax, [ebp + 20]			; Where the sum is stored
 0000023E  89 10		  mov	[eax], edx				; the total was stored in edx now moving to sdword.	

				  ; display the sum.

 00000240  8B 7D 10		  mov	edi, [ebp + 16]
 00000243  8B 75 14		  mov	esi, [ebp + 20]
 00000246  51			  push	ecx
 00000247  57			  push	edi
 00000248  E8 FFFFFF70		  call	writeVal
 0000024D  5F			  pop	edi
 0000024E  59			  pop	ecx


 0000024F  61			  popad
 00000250  5D			  pop	EBP						; Restore EBP.
 00000251  C2 0010		  RET	16						; Change this value to however much is pushed onto the stack before the procedure is called.

 00000254			FindSum		ENDP



				;----------------------------------------------------------------------------------------------------
				; Name: FindAverage
				;
				; Displays the introduction 
				;
				; Preconditions: The only preconditions are that the variables need to be pushed onto the stack in
				; the correct order.
				;
				; Postconditions: EDX changed.
				;
				; Receives: 
				;	
				; 
				; Returns: None
				;----------------------------------------------------------------------------------------------------

 00000254			FindAverage		Proc
 00000254  55			  PUSH	EBP						; Preserve EBP
 00000255  8B EC		  mov	EBP, ESP				; Assign static stack-fram pointer.
 00000257  60			  pushad

				  mDisplayString [ebp + 8]
 00000258  52		     1		push	EDX
 00000259  8B 55 08	     1		mov		EDX, [ebp + 8]
 0000025C  E8 00000000 E     1		call	WriteString					; Prints whatever string is passed to it.
 00000261  5A		     1		pop		EDX

 00000262  8B 55 0C		  mov	edx, [ebp + 12]
 00000265  8B 02		  mov	eax, [edx]
 00000267  BE 0000000A		  mov	esi, 10	
 0000026C  99			  cdq
 0000026D  F7 FE		  idiv	esi
 0000026F  6B D2 02		  imul	edx, 2
 00000272  3B D0		  cmp	edx, eax
 00000274  7D 02		  jge	_addOne
 00000276  EB 0A		  jmp	_dontAdd

 00000278			  _addone:
 00000278  83 C0 01		  add	eax, 1
 0000027B  8B 55 10		  mov	edx, [ebp + 16]			; Where the average is stored
 0000027E  89 02		  mov	[edx], eax
 00000280  EB 05		  jmp	_end

 00000282			  _dontAdd:
 00000282  8B 55 10		  mov	edx, [ebp + 16]			; Where the average is stored
 00000285  89 02		  mov	[edx], eax

 00000287			  _end:

 00000287  61			  popad
 00000288  5D			  pop	EBP						; Restore EBP.
 00000289  C2 0010		  RET	16						; Change this value to however much is pushed onto the stack before the procedure is called.

 0000028C			FindAverage		ENDP

				END main

Microsoft (R) Macro Assembler Version 14.29.30138.0	    03/12/22 16:59:08
"Project 6     (Proj6_pruittad.asm			     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000002A8 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000028C Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FindAverage  . . . . . . . . . .	P Near	 00000254 _TEXT	Length= 00000038 Public STDCALL
  _addone  . . . . . . . . . . .	L Near	 00000278 _TEXT	
  _dontAdd . . . . . . . . . . .	L Near	 00000282 _TEXT	
  _end . . . . . . . . . . . . .	L Near	 00000287 _TEXT	
FindSum  . . . . . . . . . . . .	P Near	 00000214 _TEXT	Length= 00000040 Public STDCALL
  _addNums . . . . . . . . . . .	L Near	 0000022D _TEXT	
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Intro  . . . . . . . . . . . . .	P Near	 0000009F _TEXT	Length= 00000013 Public STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PrintArray . . . . . . . . . . .	P Near	 00000179 _TEXT	Length= 00000044 Public STDCALL
  _printVal  . . . . . . . . . .	L Near	 00000197 _TEXT	
  _end . . . . . . . . . . . . .	L Near	 000001B8 _TEXT	
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 000000B2 _TEXT	Length= 000000C7 Public STDCALL
  _start . . . . . . . . . . . .	L Near	 000000C0 _TEXT	
  _getNumber . . . . . . . . . .	L Near	 000000EB _TEXT	
  _negative  . . . . . . . . . .	L Near	 00000104 _TEXT	
  _positive  . . . . . . . . . .	L Near	 00000114 _TEXT	
  _invalid . . . . . . . . . . .	L Near	 0000011D _TEXT	
  _convert . . . . . . . . . . .	L Near	 00000149 _TEXT	
  _isNegative  . . . . . . . . .	L Near	 00000166 _TEXT	
  _addToArray  . . . . . . . . .	L Near	 0000016A _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 000001BD _TEXT	Length= 00000057 Public STDCALL
  _letsChangeThisNum . . . . . .	L Near	 000001C2 _TEXT	
  _nextNum . . . . . . . . . . .	L Near	 000001C9 _TEXT	
  _addFourNum  . . . . . . . . .	L Near	 000001E1 _TEXT	
  _negativeNum . . . . . . . . .	L Near	 000001E6 _TEXT	
  _printNum  . . . . . . . . . .	L Near	 000001F3 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000009F Public STDCALL
  _getNumLoop  . . . . . . . . .	L Near	 0000000F _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYSIZE  . . . . . . . . . . .	Number	 0000000Ah   
ASCIIARRAYSIZE . . . . . . . . .	Number	 00000014h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CHARACTERSIZE  . . . . . . . . .	Number	 00000014h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
arrayPosition  . . . . . . . . .	DWord	 00000294 _DATA	
asciiArray . . . . . . . . . . .	Byte	 00000028 _DATA	
averageString  . . . . . . . . .	Byte	 00000244 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
buffer . . . . . . . . . . . . .	Byte	 00000263 _DATA	
bytesRead  . . . . . . . . . . .	DWord	 00000278 _DATA	
count  . . . . . . . . . . . . .	DWord	 00000298 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
enterNum . . . . . . . . . . . .	Byte	 00000189 _DATA	
enteredNums  . . . . . . . . . .	Byte	 00000201 _DATA	
enteredNum . . . . . . . . . . .	DWord	 00000290 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
inString . . . . . . . . . . . .	Byte	 0000027C _DATA	
intro1 . . . . . . . . . . . . .	Byte	 0000003C _DATA	
lengthAscii  . . . . . . . . . .	DWord	 000002A4 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
numArray . . . . . . . . . . . .	DWord	 00000000 _DATA	
numAverage . . . . . . . . . . .	DWord	 000002A0 _DATA	
numSum . . . . . . . . . . . . .	DWord	 0000029C _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
stringLen  . . . . . . . . . . .	DWord	 0000025F _DATA	
sumString  . . . . . . . . . . .	Byte	 00000227 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wrongNum . . . . . . . . . . . .	Byte	 000001A8 _DATA	
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
